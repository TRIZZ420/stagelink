{"ast":null,"code":"import { useRef, useState, useEffect, useCallback } from 'react';\nimport Tweezer from 'tweezer.js';\n\nfunction useScrollSnap({\n  ref = null,\n  duration = 100,\n  delay = 50\n}) {\n  const isActiveInteractionRef = useRef(null);\n  const scrollTimeoutRef = useRef(null);\n  const currentScrollOffsetRef = useRef(null);\n  const targetScrollOffsetRef = useRef(null);\n  const animationRef = useRef(null);\n  const [scrollIndex, setScrollIndex] = useState(0);\n  const tickAnimation = useCallback(value => {\n    const scrollTopDelta = targetScrollOffsetRef.current - currentScrollOffsetRef.current;\n    const scrollTop = currentScrollOffsetRef.current + scrollTopDelta * value / 10000;\n    window.scrollTo({\n      top: scrollTop,\n      behavior: 'smooth'\n    });\n  }, []);\n  const resetAnimation = useCallback(() => {\n    currentScrollOffsetRef.current = window.pageYOffset;\n    targetScrollOffsetRef.current = 0;\n    animationRef.current = null;\n  }, []);\n  const endAnimation = useCallback(() => {\n    if (!animationRef.current) return;\n    animationRef.current.stop();\n    resetAnimation();\n  }, [resetAnimation]); // Modified from https://stackoverflow.com/a/125106\n\n  const getElementsInView = useCallback(() => {\n    const elements = [].slice.call(ref.current.children); // Need to convert HTMLCollection to native JS Array\n\n    return elements.filter(element => {\n      let top = element.offsetTop;\n      const height = element.offsetHeight;\n\n      while (element.offsetParent) {\n        element = element.offsetParent;\n        top += element.offsetTop;\n      }\n\n      return top < window.pageYOffset + window.innerHeight && top + height > window.pageYOffset;\n    });\n  }, [ref]);\n  const getTargetScrollOffset = useCallback(element => {\n    let top = element.offsetTop;\n\n    while (element.offsetParent) {\n      element = element.offsetParent;\n      top += element.offsetTop;\n    }\n\n    return top;\n  }, []);\n  const snapToTarget = useCallback(target => {\n    if (animationRef.current) {\n      animationRef.current.stop();\n    }\n\n    const elements = [].slice.call(ref.current.children);\n    elements.forEach((element, index) => {\n      if (element.isSameNode(target)) {\n        setScrollIndex(index);\n      }\n    });\n    targetScrollOffsetRef.current = getTargetScrollOffset(target);\n    animationRef.current = new Tweezer({\n      start: 0,\n      end: 10000,\n      duration: duration\n    });\n    animationRef.current.on('tick', tickAnimation);\n    animationRef.current.on('done', resetAnimation);\n    animationRef.current.begin();\n  }, [ref, duration, getTargetScrollOffset, tickAnimation, resetAnimation]);\n  const findSnapTarget = useCallback(() => {\n    const deltaY = window.pageYOffset - currentScrollOffsetRef.current;\n    currentScrollOffsetRef.current = window.pageYOffset;\n    const elementsInView = getElementsInView();\n    if (!elementsInView || elementsInView.length < 2) return;\n\n    if (deltaY > 0) {\n      snapToTarget(elementsInView[1]);\n    } else {\n      snapToTarget(elementsInView[0]);\n    }\n  }, [getElementsInView, snapToTarget]);\n  const onInteractionStart = useCallback(() => {\n    endAnimation();\n    isActiveInteractionRef.current = true;\n  }, [endAnimation]);\n  const onInteractionEnd = useCallback(() => {\n    isActiveInteractionRef.current = false;\n    findSnapTarget();\n  }, [findSnapTarget]);\n  const onInteraction = useCallback(() => {\n    endAnimation();\n    if (scrollTimeoutRef) clearTimeout(scrollTimeoutRef.current);\n    if (isActiveInteractionRef.current || animationRef.current) return;\n    scrollTimeoutRef.current = setTimeout(findSnapTarget, 500);\n  }, [endAnimation, findSnapTarget]);\n  useEffect(() => {\n    if (ref) {\n      resetAnimation();\n      document.addEventListener('keydown', onInteractionStart, {\n        passive: true\n      });\n      document.addEventListener('keyup', onInteractionEnd, {\n        passive: true\n      });\n      document.addEventListener('touchstart', onInteractionStart, {\n        passive: true\n      });\n      document.addEventListener('touchend', onInteractionEnd, {\n        passive: true\n      });\n      document.addEventListener('wheel', onInteraction, {\n        passive: true\n      });\n      findSnapTarget();\n      return () => {\n        endAnimation();\n        document.removeEventListener('keydown', onInteractionStart, {\n          passive: true\n        });\n        document.removeEventListener('keyup', onInteractionEnd, {\n          passive: true\n        });\n        document.removeEventListener('touchstart', onInteractionStart, {\n          passive: true\n        });\n        document.removeEventListener('touchend', onInteractionEnd, {\n          passive: true\n        });\n        document.removeEventListener('wheel', onInteraction, {\n          passive: true\n        });\n      };\n    }\n  }, [ref, resetAnimation, findSnapTarget, endAnimation, onInteractionStart, onInteractionEnd, onInteraction]);\n  return scrollIndex;\n}\n\nexport default useScrollSnap;","map":{"version":3,"sources":["/Users/harryndugba/Documents/trading-gc/node_modules/react-use-scroll-snap/index.js"],"names":["useRef","useState","useEffect","useCallback","Tweezer","useScrollSnap","ref","duration","delay","isActiveInteractionRef","scrollTimeoutRef","currentScrollOffsetRef","targetScrollOffsetRef","animationRef","scrollIndex","setScrollIndex","tickAnimation","value","scrollTopDelta","current","scrollTop","window","scrollTo","top","behavior","resetAnimation","pageYOffset","endAnimation","stop","getElementsInView","elements","slice","call","children","filter","element","offsetTop","height","offsetHeight","offsetParent","innerHeight","getTargetScrollOffset","snapToTarget","target","forEach","index","isSameNode","start","end","on","begin","findSnapTarget","deltaY","elementsInView","length","onInteractionStart","onInteractionEnd","onInteraction","clearTimeout","setTimeout","document","addEventListener","passive","removeEventListener"],"mappings":"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","sourcesContent":["import { useRef, useState, useEffect, useCallback } from 'react';\nimport Tweezer from 'tweezer.js';\n\nfunction useScrollSnap({ ref = null, duration = 100, delay = 50 }) {\n    const isActiveInteractionRef = useRef(null);\n    const scrollTimeoutRef = useRef(null);\n    const currentScrollOffsetRef = useRef(null);\n    const targetScrollOffsetRef = useRef(null);\n    const animationRef = useRef(null);\n    const [scrollIndex, setScrollIndex] = useState(0);\n\n    const tickAnimation = useCallback((value) => {\n        const scrollTopDelta = targetScrollOffsetRef.current - currentScrollOffsetRef.current;\n        const scrollTop = currentScrollOffsetRef.current + (scrollTopDelta * value / 10000);\n        window.scrollTo({ top: scrollTop, behavior: 'smooth' });\n    }, []);\n\n    const resetAnimation = useCallback(() => {\n        currentScrollOffsetRef.current = window.pageYOffset;\n        targetScrollOffsetRef.current = 0;\n        animationRef.current = null;\n    }, []);\n\n    const endAnimation = useCallback(() => {\n        if (!animationRef.current) return;\n        animationRef.current.stop();\n        resetAnimation();\n    }, [resetAnimation]);\n\n    // Modified from https://stackoverflow.com/a/125106\n    const getElementsInView = useCallback(() => {\n        const elements = [].slice.call(ref.current.children); // Need to convert HTMLCollection to native JS Array\n        return elements.filter((element) => {\n            let top = element.offsetTop;\n            const height = element.offsetHeight;\n            while (element.offsetParent) {\n                element = element.offsetParent;\n                top += element.offsetTop;\n            }\n            return top < (window.pageYOffset + window.innerHeight) && (top + height) > window.pageYOffset;\n        });\n    }, [ref]);\n\n    const getTargetScrollOffset = useCallback((element) => {\n        let top = element.offsetTop;\n        while (element.offsetParent) {\n            element = element.offsetParent;\n            top += element.offsetTop;\n        }\n        return top;\n    }, []);\n\n    const snapToTarget = useCallback((target) => {\n        if (animationRef.current) {\n            animationRef.current.stop();\n        }\n\n        const elements = [].slice.call(ref.current.children);\n        elements.forEach((element, index) => {\n            if (element.isSameNode(target)) {\n                setScrollIndex(index);\n            }\n        });\n\n        targetScrollOffsetRef.current = getTargetScrollOffset(target);\n        animationRef.current = new Tweezer({\n            start: 0,\n            end: 10000,\n            duration: duration,\n        });\n\n        animationRef.current.on('tick', tickAnimation);\n        animationRef.current.on('done', resetAnimation);\n\n        animationRef.current.begin();\n    }, [ref, duration, getTargetScrollOffset, tickAnimation, resetAnimation]);\n\n    const findSnapTarget = useCallback(() => {\n        const deltaY = window.pageYOffset - currentScrollOffsetRef.current;\n        currentScrollOffsetRef.current = window.pageYOffset;\n\n        const elementsInView = getElementsInView();\n        if (!elementsInView || elementsInView.length < 2) return;\n\n        if (deltaY > 0) {\n            snapToTarget(elementsInView[1]);\n        } else {\n            snapToTarget(elementsInView[0]);\n        }\n    }, [getElementsInView, snapToTarget]);\n\n    const onInteractionStart = useCallback(() => {\n        endAnimation();\n        isActiveInteractionRef.current = true;\n    }, [endAnimation]);\n\n    const onInteractionEnd = useCallback(() => {\n        isActiveInteractionRef.current = false;\n        findSnapTarget();\n    }, [findSnapTarget]);\n\n    const onInteraction = useCallback(() => {\n        endAnimation();\n        if (scrollTimeoutRef) clearTimeout(scrollTimeoutRef.current);\n        if (isActiveInteractionRef.current || animationRef.current) return;\n\n        scrollTimeoutRef.current = setTimeout(findSnapTarget, 500);\n    }, [endAnimation, findSnapTarget]);\n\n    useEffect(() => {\n        if (ref) {\n            resetAnimation();\n\n            document.addEventListener('keydown', onInteractionStart, { passive: true });\n            document.addEventListener('keyup', onInteractionEnd, { passive: true });\n            document.addEventListener('touchstart', onInteractionStart, { passive: true });\n            document.addEventListener('touchend', onInteractionEnd, { passive: true });\n            document.addEventListener('wheel', onInteraction, { passive: true });\n\n            findSnapTarget();\n\n            return () => {\n                endAnimation();\n\n                document.removeEventListener('keydown', onInteractionStart, { passive: true });\n                document.removeEventListener('keyup', onInteractionEnd, { passive: true });\n                document.removeEventListener('touchstart', onInteractionStart, { passive: true });\n                document.removeEventListener('touchend', onInteractionEnd, { passive: true });\n                document.removeEventListener('wheel', onInteraction, { passive: true });\n            }\n        }\n    }, [\n        ref,\n        resetAnimation,\n        findSnapTarget,\n        endAnimation,\n        onInteractionStart,\n        onInteractionEnd,\n        onInteraction\n    ]);\n\n    return scrollIndex;\n}\n\nexport default useScrollSnap;\n"]},"metadata":{},"sourceType":"module"}